// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ST/dal/model"
)

func newInventoryInOut(db *gorm.DB) inventoryInOut {
	_inventoryInOut := inventoryInOut{}

	_inventoryInOut.inventoryInOutDo.UseDB(db)
	_inventoryInOut.inventoryInOutDo.UseModel(&model.InventoryInOut{})

	tableName := _inventoryInOut.inventoryInOutDo.TableName()
	_inventoryInOut.ALL = field.NewAsterisk(tableName)
	_inventoryInOut.ID = field.NewInt64(tableName, "id")
	_inventoryInOut.FarmID = field.NewInt64(tableName, "farm_id")
	_inventoryInOut.Sum = field.NewInt64(tableName, "sum")
	_inventoryInOut.InventoryID = field.NewInt64(tableName, "inventory_id")
	_inventoryInOut.EmployeeID = field.NewInt64(tableName, "employee_id")
	_inventoryInOut.Action = field.NewInt64(tableName, "action")
	_inventoryInOut.CreateTime = field.NewTime(tableName, "create_time")
	_inventoryInOut.DeleteAt = field.NewTime(tableName, "delete_at")
	_inventoryInOut.Amout = field.NewInt64(tableName, "amout")

	_inventoryInOut.fillFieldMap()

	return _inventoryInOut
}

type inventoryInOut struct {
	inventoryInOutDo inventoryInOutDo

	ALL         field.Asterisk
	ID          field.Int64
	FarmID      field.Int64
	Sum         field.Int64
	InventoryID field.Int64
	EmployeeID  field.Int64
	Action      field.Int64
	CreateTime  field.Time
	DeleteAt    field.Time
	Amout       field.Int64

	fieldMap map[string]field.Expr
}

func (i inventoryInOut) Table(newTableName string) *inventoryInOut {
	i.inventoryInOutDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inventoryInOut) As(alias string) *inventoryInOut {
	i.inventoryInOutDo.DO = *(i.inventoryInOutDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inventoryInOut) updateTableName(table string) *inventoryInOut {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.FarmID = field.NewInt64(table, "farm_id")
	i.Sum = field.NewInt64(table, "sum")
	i.InventoryID = field.NewInt64(table, "inventory_id")
	i.EmployeeID = field.NewInt64(table, "employee_id")
	i.Action = field.NewInt64(table, "action")
	i.CreateTime = field.NewTime(table, "create_time")
	i.DeleteAt = field.NewTime(table, "delete_at")
	i.Amout = field.NewInt64(table, "amout")

	i.fillFieldMap()

	return i
}

func (i *inventoryInOut) WithContext(ctx context.Context) IInventoryInOutDo {
	return i.inventoryInOutDo.WithContext(ctx)
}

func (i inventoryInOut) TableName() string { return i.inventoryInOutDo.TableName() }

func (i inventoryInOut) Alias() string { return i.inventoryInOutDo.Alias() }

func (i *inventoryInOut) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inventoryInOut) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 9)
	i.fieldMap["id"] = i.ID
	i.fieldMap["farm_id"] = i.FarmID
	i.fieldMap["sum"] = i.Sum
	i.fieldMap["inventory_id"] = i.InventoryID
	i.fieldMap["employee_id"] = i.EmployeeID
	i.fieldMap["action"] = i.Action
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["delete_at"] = i.DeleteAt
	i.fieldMap["amout"] = i.Amout
}

func (i inventoryInOut) clone(db *gorm.DB) inventoryInOut {
	i.inventoryInOutDo.ReplaceDB(db)
	return i
}

type inventoryInOutDo struct{ gen.DO }

type IInventoryInOutDo interface {
	gen.SubQuery
	Debug() IInventoryInOutDo
	WithContext(ctx context.Context) IInventoryInOutDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInventoryInOutDo
	Not(conds ...gen.Condition) IInventoryInOutDo
	Or(conds ...gen.Condition) IInventoryInOutDo
	Select(conds ...field.Expr) IInventoryInOutDo
	Where(conds ...gen.Condition) IInventoryInOutDo
	Order(conds ...field.Expr) IInventoryInOutDo
	Distinct(cols ...field.Expr) IInventoryInOutDo
	Omit(cols ...field.Expr) IInventoryInOutDo
	Join(table schema.Tabler, on ...field.Expr) IInventoryInOutDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryInOutDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInventoryInOutDo
	Group(cols ...field.Expr) IInventoryInOutDo
	Having(conds ...gen.Condition) IInventoryInOutDo
	Limit(limit int) IInventoryInOutDo
	Offset(offset int) IInventoryInOutDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryInOutDo
	Unscoped() IInventoryInOutDo
	Create(values ...*model.InventoryInOut) error
	CreateInBatches(values []*model.InventoryInOut, batchSize int) error
	Save(values ...*model.InventoryInOut) error
	First() (*model.InventoryInOut, error)
	Take() (*model.InventoryInOut, error)
	Last() (*model.InventoryInOut, error)
	Find() ([]*model.InventoryInOut, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InventoryInOut, err error)
	FindInBatches(result *[]*model.InventoryInOut, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InventoryInOut) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInventoryInOutDo
	Assign(attrs ...field.AssignExpr) IInventoryInOutDo
	Joins(fields ...field.RelationField) IInventoryInOutDo
	Preload(fields ...field.RelationField) IInventoryInOutDo
	FirstOrInit() (*model.InventoryInOut, error)
	FirstOrCreate() (*model.InventoryInOut, error)
	FindByPage(offset int, limit int) (result []*model.InventoryInOut, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInventoryInOutDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i inventoryInOutDo) Debug() IInventoryInOutDo {
	return i.withDO(i.DO.Debug())
}

func (i inventoryInOutDo) WithContext(ctx context.Context) IInventoryInOutDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inventoryInOutDo) ReadDB() IInventoryInOutDo {
	return i.Clauses(dbresolver.Read)
}

func (i inventoryInOutDo) WriteDB() IInventoryInOutDo {
	return i.Clauses(dbresolver.Write)
}

func (i inventoryInOutDo) Clauses(conds ...clause.Expression) IInventoryInOutDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inventoryInOutDo) Returning(value interface{}, columns ...string) IInventoryInOutDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inventoryInOutDo) Not(conds ...gen.Condition) IInventoryInOutDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inventoryInOutDo) Or(conds ...gen.Condition) IInventoryInOutDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inventoryInOutDo) Select(conds ...field.Expr) IInventoryInOutDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inventoryInOutDo) Where(conds ...gen.Condition) IInventoryInOutDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inventoryInOutDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IInventoryInOutDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i inventoryInOutDo) Order(conds ...field.Expr) IInventoryInOutDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inventoryInOutDo) Distinct(cols ...field.Expr) IInventoryInOutDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inventoryInOutDo) Omit(cols ...field.Expr) IInventoryInOutDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inventoryInOutDo) Join(table schema.Tabler, on ...field.Expr) IInventoryInOutDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inventoryInOutDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInventoryInOutDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inventoryInOutDo) RightJoin(table schema.Tabler, on ...field.Expr) IInventoryInOutDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inventoryInOutDo) Group(cols ...field.Expr) IInventoryInOutDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inventoryInOutDo) Having(conds ...gen.Condition) IInventoryInOutDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inventoryInOutDo) Limit(limit int) IInventoryInOutDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inventoryInOutDo) Offset(offset int) IInventoryInOutDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inventoryInOutDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInventoryInOutDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inventoryInOutDo) Unscoped() IInventoryInOutDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inventoryInOutDo) Create(values ...*model.InventoryInOut) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inventoryInOutDo) CreateInBatches(values []*model.InventoryInOut, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inventoryInOutDo) Save(values ...*model.InventoryInOut) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inventoryInOutDo) First() (*model.InventoryInOut, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryInOut), nil
	}
}

func (i inventoryInOutDo) Take() (*model.InventoryInOut, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryInOut), nil
	}
}

func (i inventoryInOutDo) Last() (*model.InventoryInOut, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryInOut), nil
	}
}

func (i inventoryInOutDo) Find() ([]*model.InventoryInOut, error) {
	result, err := i.DO.Find()
	return result.([]*model.InventoryInOut), err
}

func (i inventoryInOutDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InventoryInOut, err error) {
	buf := make([]*model.InventoryInOut, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inventoryInOutDo) FindInBatches(result *[]*model.InventoryInOut, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inventoryInOutDo) Attrs(attrs ...field.AssignExpr) IInventoryInOutDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inventoryInOutDo) Assign(attrs ...field.AssignExpr) IInventoryInOutDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inventoryInOutDo) Joins(fields ...field.RelationField) IInventoryInOutDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inventoryInOutDo) Preload(fields ...field.RelationField) IInventoryInOutDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inventoryInOutDo) FirstOrInit() (*model.InventoryInOut, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryInOut), nil
	}
}

func (i inventoryInOutDo) FirstOrCreate() (*model.InventoryInOut, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InventoryInOut), nil
	}
}

func (i inventoryInOutDo) FindByPage(offset int, limit int) (result []*model.InventoryInOut, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inventoryInOutDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i inventoryInOutDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i inventoryInOutDo) Delete(models ...*model.InventoryInOut) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *inventoryInOutDo) withDO(do gen.Dao) *inventoryInOutDo {
	i.DO = *do.(*gen.DO)
	return i
}
