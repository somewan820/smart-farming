// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ST/dal/model"
)

func newEnterprise(db *gorm.DB) enterprise {
	_enterprise := enterprise{}

	_enterprise.enterpriseDo.UseDB(db)
	_enterprise.enterpriseDo.UseModel(&model.Enterprise{})

	tableName := _enterprise.enterpriseDo.TableName()
	_enterprise.ALL = field.NewAsterisk(tableName)
	_enterprise.ID = field.NewInt64(tableName, "id")
	_enterprise.Name = field.NewString(tableName, "name")
	_enterprise.Address = field.NewString(tableName, "address")
	_enterprise.SuperintendentID = field.NewInt64(tableName, "superintendent_id")
	_enterprise.CreateTime = field.NewTime(tableName, "create_time")

	_enterprise.fillFieldMap()

	return _enterprise
}

type enterprise struct {
	enterpriseDo enterpriseDo

	ALL              field.Asterisk
	ID               field.Int64
	Name             field.String
	Address          field.String
	SuperintendentID field.Int64
	CreateTime       field.Time

	fieldMap map[string]field.Expr
}

func (e enterprise) Table(newTableName string) *enterprise {
	e.enterpriseDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e enterprise) As(alias string) *enterprise {
	e.enterpriseDo.DO = *(e.enterpriseDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *enterprise) updateTableName(table string) *enterprise {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Name = field.NewString(table, "name")
	e.Address = field.NewString(table, "address")
	e.SuperintendentID = field.NewInt64(table, "superintendent_id")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *enterprise) WithContext(ctx context.Context) IEnterpriseDo {
	return e.enterpriseDo.WithContext(ctx)
}

func (e enterprise) TableName() string { return e.enterpriseDo.TableName() }

func (e enterprise) Alias() string { return e.enterpriseDo.Alias() }

func (e *enterprise) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *enterprise) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["address"] = e.Address
	e.fieldMap["superintendent_id"] = e.SuperintendentID
	e.fieldMap["create_time"] = e.CreateTime
}

func (e enterprise) clone(db *gorm.DB) enterprise {
	e.enterpriseDo.ReplaceDB(db)
	return e
}

type enterpriseDo struct{ gen.DO }

type IEnterpriseDo interface {
	gen.SubQuery
	Debug() IEnterpriseDo
	WithContext(ctx context.Context) IEnterpriseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEnterpriseDo
	Not(conds ...gen.Condition) IEnterpriseDo
	Or(conds ...gen.Condition) IEnterpriseDo
	Select(conds ...field.Expr) IEnterpriseDo
	Where(conds ...gen.Condition) IEnterpriseDo
	Order(conds ...field.Expr) IEnterpriseDo
	Distinct(cols ...field.Expr) IEnterpriseDo
	Omit(cols ...field.Expr) IEnterpriseDo
	Join(table schema.Tabler, on ...field.Expr) IEnterpriseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEnterpriseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEnterpriseDo
	Group(cols ...field.Expr) IEnterpriseDo
	Having(conds ...gen.Condition) IEnterpriseDo
	Limit(limit int) IEnterpriseDo
	Offset(offset int) IEnterpriseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEnterpriseDo
	Unscoped() IEnterpriseDo
	Create(values ...*model.Enterprise) error
	CreateInBatches(values []*model.Enterprise, batchSize int) error
	Save(values ...*model.Enterprise) error
	First() (*model.Enterprise, error)
	Take() (*model.Enterprise, error)
	Last() (*model.Enterprise, error)
	Find() ([]*model.Enterprise, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Enterprise, err error)
	FindInBatches(result *[]*model.Enterprise, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Enterprise) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEnterpriseDo
	Assign(attrs ...field.AssignExpr) IEnterpriseDo
	Joins(fields ...field.RelationField) IEnterpriseDo
	Preload(fields ...field.RelationField) IEnterpriseDo
	FirstOrInit() (*model.Enterprise, error)
	FirstOrCreate() (*model.Enterprise, error)
	FindByPage(offset int, limit int) (result []*model.Enterprise, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEnterpriseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e enterpriseDo) Debug() IEnterpriseDo {
	return e.withDO(e.DO.Debug())
}

func (e enterpriseDo) WithContext(ctx context.Context) IEnterpriseDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e enterpriseDo) ReadDB() IEnterpriseDo {
	return e.Clauses(dbresolver.Read)
}

func (e enterpriseDo) WriteDB() IEnterpriseDo {
	return e.Clauses(dbresolver.Write)
}

func (e enterpriseDo) Clauses(conds ...clause.Expression) IEnterpriseDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e enterpriseDo) Returning(value interface{}, columns ...string) IEnterpriseDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e enterpriseDo) Not(conds ...gen.Condition) IEnterpriseDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e enterpriseDo) Or(conds ...gen.Condition) IEnterpriseDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e enterpriseDo) Select(conds ...field.Expr) IEnterpriseDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e enterpriseDo) Where(conds ...gen.Condition) IEnterpriseDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e enterpriseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEnterpriseDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e enterpriseDo) Order(conds ...field.Expr) IEnterpriseDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e enterpriseDo) Distinct(cols ...field.Expr) IEnterpriseDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e enterpriseDo) Omit(cols ...field.Expr) IEnterpriseDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e enterpriseDo) Join(table schema.Tabler, on ...field.Expr) IEnterpriseDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e enterpriseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEnterpriseDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e enterpriseDo) RightJoin(table schema.Tabler, on ...field.Expr) IEnterpriseDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e enterpriseDo) Group(cols ...field.Expr) IEnterpriseDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e enterpriseDo) Having(conds ...gen.Condition) IEnterpriseDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e enterpriseDo) Limit(limit int) IEnterpriseDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e enterpriseDo) Offset(offset int) IEnterpriseDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e enterpriseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEnterpriseDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e enterpriseDo) Unscoped() IEnterpriseDo {
	return e.withDO(e.DO.Unscoped())
}

func (e enterpriseDo) Create(values ...*model.Enterprise) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e enterpriseDo) CreateInBatches(values []*model.Enterprise, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e enterpriseDo) Save(values ...*model.Enterprise) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e enterpriseDo) First() (*model.Enterprise, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) Take() (*model.Enterprise, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) Last() (*model.Enterprise, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) Find() ([]*model.Enterprise, error) {
	result, err := e.DO.Find()
	return result.([]*model.Enterprise), err
}

func (e enterpriseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Enterprise, err error) {
	buf := make([]*model.Enterprise, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e enterpriseDo) FindInBatches(result *[]*model.Enterprise, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e enterpriseDo) Attrs(attrs ...field.AssignExpr) IEnterpriseDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e enterpriseDo) Assign(attrs ...field.AssignExpr) IEnterpriseDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e enterpriseDo) Joins(fields ...field.RelationField) IEnterpriseDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e enterpriseDo) Preload(fields ...field.RelationField) IEnterpriseDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e enterpriseDo) FirstOrInit() (*model.Enterprise, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) FirstOrCreate() (*model.Enterprise, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) FindByPage(offset int, limit int) (result []*model.Enterprise, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e enterpriseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e enterpriseDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e enterpriseDo) Delete(models ...*model.Enterprise) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *enterpriseDo) withDO(do gen.Dao) *enterpriseDo {
	e.DO = *do.(*gen.DO)
	return e
}
