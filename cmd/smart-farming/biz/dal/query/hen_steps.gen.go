// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ST/cmd/smart-farming/biz/dal/model"
)

func newHenStep(db *gorm.DB) henStep {
	_henStep := henStep{}

	_henStep.henStepDo.UseDB(db)
	_henStep.henStepDo.UseModel(&model.HenStep{})

	tableName := _henStep.henStepDo.TableName()
	_henStep.ALL = field.NewAsterisk(tableName)
	_henStep.ID = field.NewInt32(tableName, "id")
	_henStep.UUID = field.NewString(tableName, "uuid")
	_henStep.Mac = field.NewString(tableName, "mac")
	_henStep.Name = field.NewString(tableName, "name")
	_henStep.HenhouseID = field.NewInt32(tableName, "henhouse_id")
	_henStep.DaySteps = field.NewInt32(tableName, "day_steps")
	_henStep.TotalSteps = field.NewInt32(tableName, "total_steps")
	_henStep.Rssi = field.NewInt32(tableName, "rssi")
	_henStep.Battery = field.NewInt32(tableName, "battery")
	_henStep.CreateTime = field.NewTime(tableName, "create_time")

	_henStep.fillFieldMap()

	return _henStep
}

type henStep struct {
	henStepDo

	ALL        field.Asterisk
	ID         field.Int32
	UUID       field.String
	Mac        field.String
	Name       field.String
	HenhouseID field.Int32
	DaySteps   field.Int32
	TotalSteps field.Int32
	Rssi       field.Int32
	Battery    field.Int32
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (h henStep) Table(newTableName string) *henStep {
	h.henStepDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h henStep) As(alias string) *henStep {
	h.henStepDo.DO = *(h.henStepDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *henStep) updateTableName(table string) *henStep {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt32(table, "id")
	h.UUID = field.NewString(table, "uuid")
	h.Mac = field.NewString(table, "mac")
	h.Name = field.NewString(table, "name")
	h.HenhouseID = field.NewInt32(table, "henhouse_id")
	h.DaySteps = field.NewInt32(table, "day_steps")
	h.TotalSteps = field.NewInt32(table, "total_steps")
	h.Rssi = field.NewInt32(table, "rssi")
	h.Battery = field.NewInt32(table, "battery")
	h.CreateTime = field.NewTime(table, "create_time")

	h.fillFieldMap()

	return h
}

func (h *henStep) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *henStep) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 10)
	h.fieldMap["id"] = h.ID
	h.fieldMap["uuid"] = h.UUID
	h.fieldMap["mac"] = h.Mac
	h.fieldMap["name"] = h.Name
	h.fieldMap["henhouse_id"] = h.HenhouseID
	h.fieldMap["day_steps"] = h.DaySteps
	h.fieldMap["total_steps"] = h.TotalSteps
	h.fieldMap["rssi"] = h.Rssi
	h.fieldMap["battery"] = h.Battery
	h.fieldMap["create_time"] = h.CreateTime
}

func (h henStep) clone(db *gorm.DB) henStep {
	h.henStepDo.ReplaceDB(db)
	return h
}

type henStepDo struct{ gen.DO }

type IHenStepDo interface {
	gen.SubQuery
	Debug() IHenStepDo
	WithContext(ctx context.Context) IHenStepDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHenStepDo
	Not(conds ...gen.Condition) IHenStepDo
	Or(conds ...gen.Condition) IHenStepDo
	Select(conds ...field.Expr) IHenStepDo
	Where(conds ...gen.Condition) IHenStepDo
	Order(conds ...field.Expr) IHenStepDo
	Distinct(cols ...field.Expr) IHenStepDo
	Omit(cols ...field.Expr) IHenStepDo
	Join(table schema.Tabler, on ...field.Expr) IHenStepDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHenStepDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHenStepDo
	Group(cols ...field.Expr) IHenStepDo
	Having(conds ...gen.Condition) IHenStepDo
	Limit(limit int) IHenStepDo
	Offset(offset int) IHenStepDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHenStepDo
	Unscoped() IHenStepDo
	Create(values ...*model.HenStep) error
	CreateInBatches(values []*model.HenStep, batchSize int) error
	Save(values ...*model.HenStep) error
	First() (*model.HenStep, error)
	Take() (*model.HenStep, error)
	Last() (*model.HenStep, error)
	Find() ([]*model.HenStep, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HenStep, err error)
	FindInBatches(result *[]*model.HenStep, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HenStep) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHenStepDo
	Assign(attrs ...field.AssignExpr) IHenStepDo
	Joins(fields ...field.RelationField) IHenStepDo
	Preload(fields ...field.RelationField) IHenStepDo
	FirstOrInit() (*model.HenStep, error)
	FirstOrCreate() (*model.HenStep, error)
	FindByPage(offset int, limit int) (result []*model.HenStep, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHenStepDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h henStepDo) Debug() IHenStepDo {
	return h.withDO(h.DO.Debug())
}

func (h henStepDo) WithContext(ctx context.Context) IHenStepDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h henStepDo) ReadDB() IHenStepDo {
	return h.Clauses(dbresolver.Read)
}

func (h henStepDo) WriteDB() IHenStepDo {
	return h.Clauses(dbresolver.Write)
}

func (h henStepDo) Clauses(conds ...clause.Expression) IHenStepDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h henStepDo) Returning(value interface{}, columns ...string) IHenStepDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h henStepDo) Not(conds ...gen.Condition) IHenStepDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h henStepDo) Or(conds ...gen.Condition) IHenStepDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h henStepDo) Select(conds ...field.Expr) IHenStepDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h henStepDo) Where(conds ...gen.Condition) IHenStepDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h henStepDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHenStepDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h henStepDo) Order(conds ...field.Expr) IHenStepDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h henStepDo) Distinct(cols ...field.Expr) IHenStepDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h henStepDo) Omit(cols ...field.Expr) IHenStepDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h henStepDo) Join(table schema.Tabler, on ...field.Expr) IHenStepDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h henStepDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHenStepDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h henStepDo) RightJoin(table schema.Tabler, on ...field.Expr) IHenStepDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h henStepDo) Group(cols ...field.Expr) IHenStepDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h henStepDo) Having(conds ...gen.Condition) IHenStepDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h henStepDo) Limit(limit int) IHenStepDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h henStepDo) Offset(offset int) IHenStepDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h henStepDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHenStepDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h henStepDo) Unscoped() IHenStepDo {
	return h.withDO(h.DO.Unscoped())
}

func (h henStepDo) Create(values ...*model.HenStep) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h henStepDo) CreateInBatches(values []*model.HenStep, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h henStepDo) Save(values ...*model.HenStep) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h henStepDo) First() (*model.HenStep, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenStep), nil
	}
}

func (h henStepDo) Take() (*model.HenStep, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenStep), nil
	}
}

func (h henStepDo) Last() (*model.HenStep, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenStep), nil
	}
}

func (h henStepDo) Find() ([]*model.HenStep, error) {
	result, err := h.DO.Find()
	return result.([]*model.HenStep), err
}

func (h henStepDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HenStep, err error) {
	buf := make([]*model.HenStep, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h henStepDo) FindInBatches(result *[]*model.HenStep, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h henStepDo) Attrs(attrs ...field.AssignExpr) IHenStepDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h henStepDo) Assign(attrs ...field.AssignExpr) IHenStepDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h henStepDo) Joins(fields ...field.RelationField) IHenStepDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h henStepDo) Preload(fields ...field.RelationField) IHenStepDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h henStepDo) FirstOrInit() (*model.HenStep, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenStep), nil
	}
}

func (h henStepDo) FirstOrCreate() (*model.HenStep, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenStep), nil
	}
}

func (h henStepDo) FindByPage(offset int, limit int) (result []*model.HenStep, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h henStepDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h henStepDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h henStepDo) Delete(models ...*model.HenStep) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *henStepDo) withDO(do gen.Dao) *henStepDo {
	h.DO = *do.(*gen.DO)
	return h
}
