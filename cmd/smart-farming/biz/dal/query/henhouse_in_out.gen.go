// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ST/cmd/smart-farming/biz/dal/model"
)

func newHenhouseInOut(db *gorm.DB) henhouseInOut {
	_henhouseInOut := henhouseInOut{}

	_henhouseInOut.henhouseInOutDo.UseDB(db)
	_henhouseInOut.henhouseInOutDo.UseModel(&model.HenhouseInOut{})

	tableName := _henhouseInOut.henhouseInOutDo.TableName()
	_henhouseInOut.ALL = field.NewAsterisk(tableName)
	_henhouseInOut.ID = field.NewInt32(tableName, "id")
	_henhouseInOut.HenhouseID = field.NewInt32(tableName, "henhouse_id")
	_henhouseInOut.Amount = field.NewInt32(tableName, "amount")
	_henhouseInOut.Days = field.NewInt32(tableName, "days")
	_henhouseInOut.Action = field.NewBool(tableName, "action")
	_henhouseInOut.CreateTime = field.NewTime(tableName, "create_time")
	_henhouseInOut.EmployeeID = field.NewInt32(tableName, "employee_id")
	_henhouseInOut.Sum = field.NewInt32(tableName, "sum")

	_henhouseInOut.fillFieldMap()

	return _henhouseInOut
}

type henhouseInOut struct {
	henhouseInOutDo

	ALL        field.Asterisk
	ID         field.Int32
	HenhouseID field.Int32
	Amount     field.Int32
	Days       field.Int32
	Action     field.Bool
	CreateTime field.Time
	EmployeeID field.Int32
	Sum        field.Int32

	fieldMap map[string]field.Expr
}

func (h henhouseInOut) Table(newTableName string) *henhouseInOut {
	h.henhouseInOutDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h henhouseInOut) As(alias string) *henhouseInOut {
	h.henhouseInOutDo.DO = *(h.henhouseInOutDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *henhouseInOut) updateTableName(table string) *henhouseInOut {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt32(table, "id")
	h.HenhouseID = field.NewInt32(table, "henhouse_id")
	h.Amount = field.NewInt32(table, "amount")
	h.Days = field.NewInt32(table, "days")
	h.Action = field.NewBool(table, "action")
	h.CreateTime = field.NewTime(table, "create_time")
	h.EmployeeID = field.NewInt32(table, "employee_id")
	h.Sum = field.NewInt32(table, "sum")

	h.fillFieldMap()

	return h
}

func (h *henhouseInOut) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *henhouseInOut) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 8)
	h.fieldMap["id"] = h.ID
	h.fieldMap["henhouse_id"] = h.HenhouseID
	h.fieldMap["amount"] = h.Amount
	h.fieldMap["days"] = h.Days
	h.fieldMap["action"] = h.Action
	h.fieldMap["create_time"] = h.CreateTime
	h.fieldMap["employee_id"] = h.EmployeeID
	h.fieldMap["sum"] = h.Sum
}

func (h henhouseInOut) clone(db *gorm.DB) henhouseInOut {
	h.henhouseInOutDo.ReplaceDB(db)
	return h
}

type henhouseInOutDo struct{ gen.DO }

type IHenhouseInOutDo interface {
	gen.SubQuery
	Debug() IHenhouseInOutDo
	WithContext(ctx context.Context) IHenhouseInOutDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHenhouseInOutDo
	Not(conds ...gen.Condition) IHenhouseInOutDo
	Or(conds ...gen.Condition) IHenhouseInOutDo
	Select(conds ...field.Expr) IHenhouseInOutDo
	Where(conds ...gen.Condition) IHenhouseInOutDo
	Order(conds ...field.Expr) IHenhouseInOutDo
	Distinct(cols ...field.Expr) IHenhouseInOutDo
	Omit(cols ...field.Expr) IHenhouseInOutDo
	Join(table schema.Tabler, on ...field.Expr) IHenhouseInOutDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHenhouseInOutDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHenhouseInOutDo
	Group(cols ...field.Expr) IHenhouseInOutDo
	Having(conds ...gen.Condition) IHenhouseInOutDo
	Limit(limit int) IHenhouseInOutDo
	Offset(offset int) IHenhouseInOutDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHenhouseInOutDo
	Unscoped() IHenhouseInOutDo
	Create(values ...*model.HenhouseInOut) error
	CreateInBatches(values []*model.HenhouseInOut, batchSize int) error
	Save(values ...*model.HenhouseInOut) error
	First() (*model.HenhouseInOut, error)
	Take() (*model.HenhouseInOut, error)
	Last() (*model.HenhouseInOut, error)
	Find() ([]*model.HenhouseInOut, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HenhouseInOut, err error)
	FindInBatches(result *[]*model.HenhouseInOut, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HenhouseInOut) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHenhouseInOutDo
	Assign(attrs ...field.AssignExpr) IHenhouseInOutDo
	Joins(fields ...field.RelationField) IHenhouseInOutDo
	Preload(fields ...field.RelationField) IHenhouseInOutDo
	FirstOrInit() (*model.HenhouseInOut, error)
	FirstOrCreate() (*model.HenhouseInOut, error)
	FindByPage(offset int, limit int) (result []*model.HenhouseInOut, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHenhouseInOutDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h henhouseInOutDo) Debug() IHenhouseInOutDo {
	return h.withDO(h.DO.Debug())
}

func (h henhouseInOutDo) WithContext(ctx context.Context) IHenhouseInOutDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h henhouseInOutDo) ReadDB() IHenhouseInOutDo {
	return h.Clauses(dbresolver.Read)
}

func (h henhouseInOutDo) WriteDB() IHenhouseInOutDo {
	return h.Clauses(dbresolver.Write)
}

func (h henhouseInOutDo) Clauses(conds ...clause.Expression) IHenhouseInOutDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h henhouseInOutDo) Returning(value interface{}, columns ...string) IHenhouseInOutDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h henhouseInOutDo) Not(conds ...gen.Condition) IHenhouseInOutDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h henhouseInOutDo) Or(conds ...gen.Condition) IHenhouseInOutDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h henhouseInOutDo) Select(conds ...field.Expr) IHenhouseInOutDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h henhouseInOutDo) Where(conds ...gen.Condition) IHenhouseInOutDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h henhouseInOutDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHenhouseInOutDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h henhouseInOutDo) Order(conds ...field.Expr) IHenhouseInOutDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h henhouseInOutDo) Distinct(cols ...field.Expr) IHenhouseInOutDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h henhouseInOutDo) Omit(cols ...field.Expr) IHenhouseInOutDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h henhouseInOutDo) Join(table schema.Tabler, on ...field.Expr) IHenhouseInOutDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h henhouseInOutDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHenhouseInOutDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h henhouseInOutDo) RightJoin(table schema.Tabler, on ...field.Expr) IHenhouseInOutDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h henhouseInOutDo) Group(cols ...field.Expr) IHenhouseInOutDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h henhouseInOutDo) Having(conds ...gen.Condition) IHenhouseInOutDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h henhouseInOutDo) Limit(limit int) IHenhouseInOutDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h henhouseInOutDo) Offset(offset int) IHenhouseInOutDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h henhouseInOutDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHenhouseInOutDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h henhouseInOutDo) Unscoped() IHenhouseInOutDo {
	return h.withDO(h.DO.Unscoped())
}

func (h henhouseInOutDo) Create(values ...*model.HenhouseInOut) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h henhouseInOutDo) CreateInBatches(values []*model.HenhouseInOut, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h henhouseInOutDo) Save(values ...*model.HenhouseInOut) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h henhouseInOutDo) First() (*model.HenhouseInOut, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenhouseInOut), nil
	}
}

func (h henhouseInOutDo) Take() (*model.HenhouseInOut, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenhouseInOut), nil
	}
}

func (h henhouseInOutDo) Last() (*model.HenhouseInOut, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenhouseInOut), nil
	}
}

func (h henhouseInOutDo) Find() ([]*model.HenhouseInOut, error) {
	result, err := h.DO.Find()
	return result.([]*model.HenhouseInOut), err
}

func (h henhouseInOutDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HenhouseInOut, err error) {
	buf := make([]*model.HenhouseInOut, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h henhouseInOutDo) FindInBatches(result *[]*model.HenhouseInOut, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h henhouseInOutDo) Attrs(attrs ...field.AssignExpr) IHenhouseInOutDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h henhouseInOutDo) Assign(attrs ...field.AssignExpr) IHenhouseInOutDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h henhouseInOutDo) Joins(fields ...field.RelationField) IHenhouseInOutDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h henhouseInOutDo) Preload(fields ...field.RelationField) IHenhouseInOutDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h henhouseInOutDo) FirstOrInit() (*model.HenhouseInOut, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenhouseInOut), nil
	}
}

func (h henhouseInOutDo) FirstOrCreate() (*model.HenhouseInOut, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HenhouseInOut), nil
	}
}

func (h henhouseInOutDo) FindByPage(offset int, limit int) (result []*model.HenhouseInOut, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h henhouseInOutDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h henhouseInOutDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h henhouseInOutDo) Delete(models ...*model.HenhouseInOut) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *henhouseInOutDo) withDO(do gen.Dao) *henhouseInOutDo {
	h.DO = *do.(*gen.DO)
	return h
}
