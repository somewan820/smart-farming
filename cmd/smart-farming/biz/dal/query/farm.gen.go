// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ST/cmd/smart-farming/biz/dal/model"
)

func newFarm(db *gorm.DB) farm {
	_farm := farm{}

	_farm.farmDo.UseDB(db)
	_farm.farmDo.UseModel(&model.Farm{})

	tableName := _farm.farmDo.TableName()
	_farm.ALL = field.NewAsterisk(tableName)
	_farm.ID = field.NewInt32(tableName, "id")
	_farm.EnterpriseID = field.NewInt32(tableName, "enterprise_id")
	_farm.SuperintendentID = field.NewInt32(tableName, "superintendent_id")
	_farm.Name = field.NewString(tableName, "name")
	_farm.Address = field.NewString(tableName, "address")
	_farm.CreateTime = field.NewTime(tableName, "create_time")

	_farm.fillFieldMap()

	return _farm
}

type farm struct {
	farmDo

	ALL              field.Asterisk
	ID               field.Int32
	EnterpriseID     field.Int32
	SuperintendentID field.Int32
	Name             field.String
	Address          field.String
	CreateTime       field.Time

	fieldMap map[string]field.Expr
}

func (f farm) Table(newTableName string) *farm {
	f.farmDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f farm) As(alias string) *farm {
	f.farmDo.DO = *(f.farmDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *farm) updateTableName(table string) *farm {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt32(table, "id")
	f.EnterpriseID = field.NewInt32(table, "enterprise_id")
	f.SuperintendentID = field.NewInt32(table, "superintendent_id")
	f.Name = field.NewString(table, "name")
	f.Address = field.NewString(table, "address")
	f.CreateTime = field.NewTime(table, "create_time")

	f.fillFieldMap()

	return f
}

func (f *farm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *farm) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["enterprise_id"] = f.EnterpriseID
	f.fieldMap["superintendent_id"] = f.SuperintendentID
	f.fieldMap["name"] = f.Name
	f.fieldMap["address"] = f.Address
	f.fieldMap["create_time"] = f.CreateTime
}

func (f farm) clone(db *gorm.DB) farm {
	f.farmDo.ReplaceDB(db)
	return f
}

type farmDo struct{ gen.DO }

type IFarmDo interface {
	gen.SubQuery
	Debug() IFarmDo
	WithContext(ctx context.Context) IFarmDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFarmDo
	Not(conds ...gen.Condition) IFarmDo
	Or(conds ...gen.Condition) IFarmDo
	Select(conds ...field.Expr) IFarmDo
	Where(conds ...gen.Condition) IFarmDo
	Order(conds ...field.Expr) IFarmDo
	Distinct(cols ...field.Expr) IFarmDo
	Omit(cols ...field.Expr) IFarmDo
	Join(table schema.Tabler, on ...field.Expr) IFarmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFarmDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFarmDo
	Group(cols ...field.Expr) IFarmDo
	Having(conds ...gen.Condition) IFarmDo
	Limit(limit int) IFarmDo
	Offset(offset int) IFarmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFarmDo
	Unscoped() IFarmDo
	Create(values ...*model.Farm) error
	CreateInBatches(values []*model.Farm, batchSize int) error
	Save(values ...*model.Farm) error
	First() (*model.Farm, error)
	Take() (*model.Farm, error)
	Last() (*model.Farm, error)
	Find() ([]*model.Farm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Farm, err error)
	FindInBatches(result *[]*model.Farm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Farm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFarmDo
	Assign(attrs ...field.AssignExpr) IFarmDo
	Joins(fields ...field.RelationField) IFarmDo
	Preload(fields ...field.RelationField) IFarmDo
	FirstOrInit() (*model.Farm, error)
	FirstOrCreate() (*model.Farm, error)
	FindByPage(offset int, limit int) (result []*model.Farm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFarmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f farmDo) Debug() IFarmDo {
	return f.withDO(f.DO.Debug())
}

func (f farmDo) WithContext(ctx context.Context) IFarmDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f farmDo) ReadDB() IFarmDo {
	return f.Clauses(dbresolver.Read)
}

func (f farmDo) WriteDB() IFarmDo {
	return f.Clauses(dbresolver.Write)
}

func (f farmDo) Clauses(conds ...clause.Expression) IFarmDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f farmDo) Returning(value interface{}, columns ...string) IFarmDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f farmDo) Not(conds ...gen.Condition) IFarmDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f farmDo) Or(conds ...gen.Condition) IFarmDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f farmDo) Select(conds ...field.Expr) IFarmDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f farmDo) Where(conds ...gen.Condition) IFarmDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f farmDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFarmDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f farmDo) Order(conds ...field.Expr) IFarmDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f farmDo) Distinct(cols ...field.Expr) IFarmDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f farmDo) Omit(cols ...field.Expr) IFarmDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f farmDo) Join(table schema.Tabler, on ...field.Expr) IFarmDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f farmDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFarmDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f farmDo) RightJoin(table schema.Tabler, on ...field.Expr) IFarmDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f farmDo) Group(cols ...field.Expr) IFarmDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f farmDo) Having(conds ...gen.Condition) IFarmDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f farmDo) Limit(limit int) IFarmDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f farmDo) Offset(offset int) IFarmDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f farmDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFarmDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f farmDo) Unscoped() IFarmDo {
	return f.withDO(f.DO.Unscoped())
}

func (f farmDo) Create(values ...*model.Farm) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f farmDo) CreateInBatches(values []*model.Farm, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f farmDo) Save(values ...*model.Farm) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f farmDo) First() (*model.Farm, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Farm), nil
	}
}

func (f farmDo) Take() (*model.Farm, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Farm), nil
	}
}

func (f farmDo) Last() (*model.Farm, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Farm), nil
	}
}

func (f farmDo) Find() ([]*model.Farm, error) {
	result, err := f.DO.Find()
	return result.([]*model.Farm), err
}

func (f farmDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Farm, err error) {
	buf := make([]*model.Farm, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f farmDo) FindInBatches(result *[]*model.Farm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f farmDo) Attrs(attrs ...field.AssignExpr) IFarmDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f farmDo) Assign(attrs ...field.AssignExpr) IFarmDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f farmDo) Joins(fields ...field.RelationField) IFarmDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f farmDo) Preload(fields ...field.RelationField) IFarmDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f farmDo) FirstOrInit() (*model.Farm, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Farm), nil
	}
}

func (f farmDo) FirstOrCreate() (*model.Farm, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Farm), nil
	}
}

func (f farmDo) FindByPage(offset int, limit int) (result []*model.Farm, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f farmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f farmDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f farmDo) Delete(models ...*model.Farm) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *farmDo) withDO(do gen.Dao) *farmDo {
	f.DO = *do.(*gen.DO)
	return f
}
