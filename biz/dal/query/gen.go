// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q                   = new(Query)
	Device              *device
	Employee            *employee
	EmployeeAffiliation *employeeAffiliation
	Enterprise          *enterprise
	Farm                *farm
	HenStep             *henStep
	Henhouse            *henhouse
	HenhouseInOut       *henhouseInOut
	Inventory           *inventory
	InventoryInOut      *inventoryInOut
	Order               *order
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	Device = &Q.Device
	Employee = &Q.Employee
	EmployeeAffiliation = &Q.EmployeeAffiliation
	Enterprise = &Q.Enterprise
	Farm = &Q.Farm
	HenStep = &Q.HenStep
	Henhouse = &Q.Henhouse
	HenhouseInOut = &Q.HenhouseInOut
	Inventory = &Q.Inventory
	InventoryInOut = &Q.InventoryInOut
	Order = &Q.Order
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Device:              newDevice(db),
		Employee:            newEmployee(db),
		EmployeeAffiliation: newEmployeeAffiliation(db),
		Enterprise:          newEnterprise(db),
		Farm:                newFarm(db),
		HenStep:             newHenStep(db),
		Henhouse:            newHenhouse(db),
		HenhouseInOut:       newHenhouseInOut(db),
		Inventory:           newInventory(db),
		InventoryInOut:      newInventoryInOut(db),
		Order:               newOrder(db),
	}
}

type Query struct {
	db *gorm.DB

	Device              device
	Employee            employee
	EmployeeAffiliation employeeAffiliation
	Enterprise          enterprise
	Farm                farm
	HenStep             henStep
	Henhouse            henhouse
	HenhouseInOut       henhouseInOut
	Inventory           inventory
	InventoryInOut      inventoryInOut
	Order               order
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Device:              q.Device.clone(db),
		Employee:            q.Employee.clone(db),
		EmployeeAffiliation: q.EmployeeAffiliation.clone(db),
		Enterprise:          q.Enterprise.clone(db),
		Farm:                q.Farm.clone(db),
		HenStep:             q.HenStep.clone(db),
		Henhouse:            q.Henhouse.clone(db),
		HenhouseInOut:       q.HenhouseInOut.clone(db),
		Inventory:           q.Inventory.clone(db),
		InventoryInOut:      q.InventoryInOut.clone(db),
		Order:               q.Order.clone(db),
	}
}

type queryCtx struct {
	Device              IDeviceDo
	Employee            IEmployeeDo
	EmployeeAffiliation IEmployeeAffiliationDo
	Enterprise          IEnterpriseDo
	Farm                IFarmDo
	HenStep             IHenStepDo
	Henhouse            IHenhouseDo
	HenhouseInOut       IHenhouseInOutDo
	Inventory           IInventoryDo
	InventoryInOut      IInventoryInOutDo
	Order               IOrderDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Device:              q.Device.WithContext(ctx),
		Employee:            q.Employee.WithContext(ctx),
		EmployeeAffiliation: q.EmployeeAffiliation.WithContext(ctx),
		Enterprise:          q.Enterprise.WithContext(ctx),
		Farm:                q.Farm.WithContext(ctx),
		HenStep:             q.HenStep.WithContext(ctx),
		Henhouse:            q.Henhouse.WithContext(ctx),
		HenhouseInOut:       q.HenhouseInOut.WithContext(ctx),
		Inventory:           q.Inventory.WithContext(ctx),
		InventoryInOut:      q.InventoryInOut.WithContext(ctx),
		Order:               q.Order.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
