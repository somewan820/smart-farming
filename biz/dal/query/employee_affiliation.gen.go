// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ST/biz/dal/model"
)

func newEmployeeAffiliation(db *gorm.DB) employeeAffiliation {
	_employeeAffiliation := employeeAffiliation{}

	_employeeAffiliation.employeeAffiliationDo.UseDB(db)
	_employeeAffiliation.employeeAffiliationDo.UseModel(&model.EmployeeAffiliation{})

	tableName := _employeeAffiliation.employeeAffiliationDo.TableName()
	_employeeAffiliation.ALL = field.NewAsterisk(tableName)
	_employeeAffiliation.ID = field.NewInt32(tableName, "id")
	_employeeAffiliation.EmployeeID = field.NewInt32(tableName, "employee_id")
	_employeeAffiliation.FarmID = field.NewInt32(tableName, "farm_id")
	_employeeAffiliation.EnterpriseID = field.NewInt32(tableName, "enterprise_id")
	_employeeAffiliation.CreateTime = field.NewTime(tableName, "create_time")

	_employeeAffiliation.fillFieldMap()

	return _employeeAffiliation
}

type employeeAffiliation struct {
	employeeAffiliationDo

	ALL          field.Asterisk
	ID           field.Int32
	EmployeeID   field.Int32
	FarmID       field.Int32
	EnterpriseID field.Int32
	CreateTime   field.Time

	fieldMap map[string]field.Expr
}

func (e employeeAffiliation) Table(newTableName string) *employeeAffiliation {
	e.employeeAffiliationDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e employeeAffiliation) As(alias string) *employeeAffiliation {
	e.employeeAffiliationDo.DO = *(e.employeeAffiliationDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *employeeAffiliation) updateTableName(table string) *employeeAffiliation {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.EmployeeID = field.NewInt32(table, "employee_id")
	e.FarmID = field.NewInt32(table, "farm_id")
	e.EnterpriseID = field.NewInt32(table, "enterprise_id")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *employeeAffiliation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *employeeAffiliation) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["id"] = e.ID
	e.fieldMap["employee_id"] = e.EmployeeID
	e.fieldMap["farm_id"] = e.FarmID
	e.fieldMap["enterprise_id"] = e.EnterpriseID
	e.fieldMap["create_time"] = e.CreateTime
}

func (e employeeAffiliation) clone(db *gorm.DB) employeeAffiliation {
	e.employeeAffiliationDo.ReplaceDB(db)
	return e
}

type employeeAffiliationDo struct{ gen.DO }

type IEmployeeAffiliationDo interface {
	gen.SubQuery
	Debug() IEmployeeAffiliationDo
	WithContext(ctx context.Context) IEmployeeAffiliationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEmployeeAffiliationDo
	Not(conds ...gen.Condition) IEmployeeAffiliationDo
	Or(conds ...gen.Condition) IEmployeeAffiliationDo
	Select(conds ...field.Expr) IEmployeeAffiliationDo
	Where(conds ...gen.Condition) IEmployeeAffiliationDo
	Order(conds ...field.Expr) IEmployeeAffiliationDo
	Distinct(cols ...field.Expr) IEmployeeAffiliationDo
	Omit(cols ...field.Expr) IEmployeeAffiliationDo
	Join(table schema.Tabler, on ...field.Expr) IEmployeeAffiliationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeeAffiliationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEmployeeAffiliationDo
	Group(cols ...field.Expr) IEmployeeAffiliationDo
	Having(conds ...gen.Condition) IEmployeeAffiliationDo
	Limit(limit int) IEmployeeAffiliationDo
	Offset(offset int) IEmployeeAffiliationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeeAffiliationDo
	Unscoped() IEmployeeAffiliationDo
	Create(values ...*model.EmployeeAffiliation) error
	CreateInBatches(values []*model.EmployeeAffiliation, batchSize int) error
	Save(values ...*model.EmployeeAffiliation) error
	First() (*model.EmployeeAffiliation, error)
	Take() (*model.EmployeeAffiliation, error)
	Last() (*model.EmployeeAffiliation, error)
	Find() ([]*model.EmployeeAffiliation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmployeeAffiliation, err error)
	FindInBatches(result *[]*model.EmployeeAffiliation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EmployeeAffiliation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEmployeeAffiliationDo
	Assign(attrs ...field.AssignExpr) IEmployeeAffiliationDo
	Joins(fields ...field.RelationField) IEmployeeAffiliationDo
	Preload(fields ...field.RelationField) IEmployeeAffiliationDo
	FirstOrInit() (*model.EmployeeAffiliation, error)
	FirstOrCreate() (*model.EmployeeAffiliation, error)
	FindByPage(offset int, limit int) (result []*model.EmployeeAffiliation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEmployeeAffiliationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e employeeAffiliationDo) Debug() IEmployeeAffiliationDo {
	return e.withDO(e.DO.Debug())
}

func (e employeeAffiliationDo) WithContext(ctx context.Context) IEmployeeAffiliationDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e employeeAffiliationDo) ReadDB() IEmployeeAffiliationDo {
	return e.Clauses(dbresolver.Read)
}

func (e employeeAffiliationDo) WriteDB() IEmployeeAffiliationDo {
	return e.Clauses(dbresolver.Write)
}

func (e employeeAffiliationDo) Clauses(conds ...clause.Expression) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e employeeAffiliationDo) Returning(value interface{}, columns ...string) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e employeeAffiliationDo) Not(conds ...gen.Condition) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e employeeAffiliationDo) Or(conds ...gen.Condition) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e employeeAffiliationDo) Select(conds ...field.Expr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e employeeAffiliationDo) Where(conds ...gen.Condition) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e employeeAffiliationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEmployeeAffiliationDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e employeeAffiliationDo) Order(conds ...field.Expr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e employeeAffiliationDo) Distinct(cols ...field.Expr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e employeeAffiliationDo) Omit(cols ...field.Expr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e employeeAffiliationDo) Join(table schema.Tabler, on ...field.Expr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e employeeAffiliationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e employeeAffiliationDo) RightJoin(table schema.Tabler, on ...field.Expr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e employeeAffiliationDo) Group(cols ...field.Expr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e employeeAffiliationDo) Having(conds ...gen.Condition) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e employeeAffiliationDo) Limit(limit int) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e employeeAffiliationDo) Offset(offset int) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e employeeAffiliationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e employeeAffiliationDo) Unscoped() IEmployeeAffiliationDo {
	return e.withDO(e.DO.Unscoped())
}

func (e employeeAffiliationDo) Create(values ...*model.EmployeeAffiliation) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e employeeAffiliationDo) CreateInBatches(values []*model.EmployeeAffiliation, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e employeeAffiliationDo) Save(values ...*model.EmployeeAffiliation) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e employeeAffiliationDo) First() (*model.EmployeeAffiliation, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmployeeAffiliation), nil
	}
}

func (e employeeAffiliationDo) Take() (*model.EmployeeAffiliation, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmployeeAffiliation), nil
	}
}

func (e employeeAffiliationDo) Last() (*model.EmployeeAffiliation, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmployeeAffiliation), nil
	}
}

func (e employeeAffiliationDo) Find() ([]*model.EmployeeAffiliation, error) {
	result, err := e.DO.Find()
	return result.([]*model.EmployeeAffiliation), err
}

func (e employeeAffiliationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EmployeeAffiliation, err error) {
	buf := make([]*model.EmployeeAffiliation, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e employeeAffiliationDo) FindInBatches(result *[]*model.EmployeeAffiliation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e employeeAffiliationDo) Attrs(attrs ...field.AssignExpr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e employeeAffiliationDo) Assign(attrs ...field.AssignExpr) IEmployeeAffiliationDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e employeeAffiliationDo) Joins(fields ...field.RelationField) IEmployeeAffiliationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e employeeAffiliationDo) Preload(fields ...field.RelationField) IEmployeeAffiliationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e employeeAffiliationDo) FirstOrInit() (*model.EmployeeAffiliation, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmployeeAffiliation), nil
	}
}

func (e employeeAffiliationDo) FirstOrCreate() (*model.EmployeeAffiliation, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EmployeeAffiliation), nil
	}
}

func (e employeeAffiliationDo) FindByPage(offset int, limit int) (result []*model.EmployeeAffiliation, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e employeeAffiliationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e employeeAffiliationDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e employeeAffiliationDo) Delete(models ...*model.EmployeeAffiliation) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *employeeAffiliationDo) withDO(do gen.Dao) *employeeAffiliationDo {
	e.DO = *do.(*gen.DO)
	return e
}
