// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"ST/biz/dal/model"
)

func newHenhouse(db *gorm.DB) henhouse {
	_henhouse := henhouse{}

	_henhouse.henhouseDo.UseDB(db)
	_henhouse.henhouseDo.UseModel(&model.Henhouse{})

	tableName := _henhouse.henhouseDo.TableName()
	_henhouse.ALL = field.NewAsterisk(tableName)
	_henhouse.ID = field.NewInt32(tableName, "id")
	_henhouse.FarmID = field.NewInt32(tableName, "farm_id")
	_henhouse.Longitude = field.NewFloat32(tableName, "longitude")
	_henhouse.Latitude = field.NewFloat32(tableName, "latitude")
	_henhouse.Name = field.NewString(tableName, "name")
	_henhouse.CreateTime = field.NewTime(tableName, "create_time")
	_henhouse.Sum = field.NewInt32(tableName, "sum")

	_henhouse.fillFieldMap()

	return _henhouse
}

type henhouse struct {
	henhouseDo

	ALL        field.Asterisk
	ID         field.Int32
	FarmID     field.Int32
	Longitude  field.Float32
	Latitude   field.Float32
	Name       field.String
	CreateTime field.Time
	Sum        field.Int32

	fieldMap map[string]field.Expr
}

func (h henhouse) Table(newTableName string) *henhouse {
	h.henhouseDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h henhouse) As(alias string) *henhouse {
	h.henhouseDo.DO = *(h.henhouseDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *henhouse) updateTableName(table string) *henhouse {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt32(table, "id")
	h.FarmID = field.NewInt32(table, "farm_id")
	h.Longitude = field.NewFloat32(table, "longitude")
	h.Latitude = field.NewFloat32(table, "latitude")
	h.Name = field.NewString(table, "name")
	h.CreateTime = field.NewTime(table, "create_time")
	h.Sum = field.NewInt32(table, "sum")

	h.fillFieldMap()

	return h
}

func (h *henhouse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *henhouse) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 7)
	h.fieldMap["id"] = h.ID
	h.fieldMap["farm_id"] = h.FarmID
	h.fieldMap["longitude"] = h.Longitude
	h.fieldMap["latitude"] = h.Latitude
	h.fieldMap["name"] = h.Name
	h.fieldMap["create_time"] = h.CreateTime
	h.fieldMap["sum"] = h.Sum
}

func (h henhouse) clone(db *gorm.DB) henhouse {
	h.henhouseDo.ReplaceDB(db)
	return h
}

type henhouseDo struct{ gen.DO }

type IHenhouseDo interface {
	gen.SubQuery
	Debug() IHenhouseDo
	WithContext(ctx context.Context) IHenhouseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	As(alias string) gen.Dao
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHenhouseDo
	Not(conds ...gen.Condition) IHenhouseDo
	Or(conds ...gen.Condition) IHenhouseDo
	Select(conds ...field.Expr) IHenhouseDo
	Where(conds ...gen.Condition) IHenhouseDo
	Order(conds ...field.Expr) IHenhouseDo
	Distinct(cols ...field.Expr) IHenhouseDo
	Omit(cols ...field.Expr) IHenhouseDo
	Join(table schema.Tabler, on ...field.Expr) IHenhouseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHenhouseDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHenhouseDo
	Group(cols ...field.Expr) IHenhouseDo
	Having(conds ...gen.Condition) IHenhouseDo
	Limit(limit int) IHenhouseDo
	Offset(offset int) IHenhouseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHenhouseDo
	Unscoped() IHenhouseDo
	Create(values ...*model.Henhouse) error
	CreateInBatches(values []*model.Henhouse, batchSize int) error
	Save(values ...*model.Henhouse) error
	First() (*model.Henhouse, error)
	Take() (*model.Henhouse, error)
	Last() (*model.Henhouse, error)
	Find() ([]*model.Henhouse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Henhouse, err error)
	FindInBatches(result *[]*model.Henhouse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Henhouse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHenhouseDo
	Assign(attrs ...field.AssignExpr) IHenhouseDo
	Joins(fields ...field.RelationField) IHenhouseDo
	Preload(fields ...field.RelationField) IHenhouseDo
	FirstOrInit() (*model.Henhouse, error)
	FirstOrCreate() (*model.Henhouse, error)
	FindByPage(offset int, limit int) (result []*model.Henhouse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHenhouseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h henhouseDo) Debug() IHenhouseDo {
	return h.withDO(h.DO.Debug())
}

func (h henhouseDo) WithContext(ctx context.Context) IHenhouseDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h henhouseDo) ReadDB() IHenhouseDo {
	return h.Clauses(dbresolver.Read)
}

func (h henhouseDo) WriteDB() IHenhouseDo {
	return h.Clauses(dbresolver.Write)
}

func (h henhouseDo) Clauses(conds ...clause.Expression) IHenhouseDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h henhouseDo) Returning(value interface{}, columns ...string) IHenhouseDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h henhouseDo) Not(conds ...gen.Condition) IHenhouseDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h henhouseDo) Or(conds ...gen.Condition) IHenhouseDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h henhouseDo) Select(conds ...field.Expr) IHenhouseDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h henhouseDo) Where(conds ...gen.Condition) IHenhouseDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h henhouseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IHenhouseDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h henhouseDo) Order(conds ...field.Expr) IHenhouseDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h henhouseDo) Distinct(cols ...field.Expr) IHenhouseDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h henhouseDo) Omit(cols ...field.Expr) IHenhouseDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h henhouseDo) Join(table schema.Tabler, on ...field.Expr) IHenhouseDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h henhouseDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHenhouseDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h henhouseDo) RightJoin(table schema.Tabler, on ...field.Expr) IHenhouseDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h henhouseDo) Group(cols ...field.Expr) IHenhouseDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h henhouseDo) Having(conds ...gen.Condition) IHenhouseDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h henhouseDo) Limit(limit int) IHenhouseDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h henhouseDo) Offset(offset int) IHenhouseDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h henhouseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHenhouseDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h henhouseDo) Unscoped() IHenhouseDo {
	return h.withDO(h.DO.Unscoped())
}

func (h henhouseDo) Create(values ...*model.Henhouse) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h henhouseDo) CreateInBatches(values []*model.Henhouse, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h henhouseDo) Save(values ...*model.Henhouse) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h henhouseDo) First() (*model.Henhouse, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Henhouse), nil
	}
}

func (h henhouseDo) Take() (*model.Henhouse, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Henhouse), nil
	}
}

func (h henhouseDo) Last() (*model.Henhouse, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Henhouse), nil
	}
}

func (h henhouseDo) Find() ([]*model.Henhouse, error) {
	result, err := h.DO.Find()
	return result.([]*model.Henhouse), err
}

func (h henhouseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Henhouse, err error) {
	buf := make([]*model.Henhouse, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h henhouseDo) FindInBatches(result *[]*model.Henhouse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h henhouseDo) Attrs(attrs ...field.AssignExpr) IHenhouseDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h henhouseDo) Assign(attrs ...field.AssignExpr) IHenhouseDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h henhouseDo) Joins(fields ...field.RelationField) IHenhouseDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h henhouseDo) Preload(fields ...field.RelationField) IHenhouseDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h henhouseDo) FirstOrInit() (*model.Henhouse, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Henhouse), nil
	}
}

func (h henhouseDo) FirstOrCreate() (*model.Henhouse, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Henhouse), nil
	}
}

func (h henhouseDo) FindByPage(offset int, limit int) (result []*model.Henhouse, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h henhouseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h henhouseDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h henhouseDo) Delete(models ...*model.Henhouse) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *henhouseDo) withDO(do gen.Dao) *henhouseDo {
	h.DO = *do.(*gen.DO)
	return h
}
